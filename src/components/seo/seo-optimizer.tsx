'use client';

import { useState, useEffect } from 'react';

import {
  Search,
  TrendingUp,
  AlertCircle,
  CheckCircle,
  Eye,
  Target,
  Lightbulb,
  RefreshCw,
  Settings,
  BarChart3,
  Globe,
  Share2,
  Tag,
  Image,
  Link,
  Code,
  FileText,
  Plus,
  Download,
  Upload
} from 'lucide-react';
import { useLocale } from 'next-intl';

import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Progress } from '@/components/ui/progress';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from '@/components/ui/textarea';

interface SEOScore {
  overall: number
  titleScore: number
  descriptionScore: number
  keywordScore: number
  contentScore: number
  lastCalculated: string
}

interface SEORecommendation {
  id: string
  type: 'critical' | 'important' | 'suggestion'
  message: string
  field: string
  resolved: boolean
}

interface SEOMetadata {
  id: string
  title: string
  description: string
  keywords: string[]
  focusKeyword: string
  canonicalUrl: string
  contentReference: {
    contentId: string
    contentType: string
  }
  structuredData: {
    productSchema?: any
    organizationSchema?: any
    breadcrumbSchema?: any
    articleSchema?: any
  }
  openGraph: {
    title: string
    description: string
    image: string
    type: string
  }
  twitterCard: {
    card: string
    title: string
    description: string
    image: string
  }
  robots: {
    index: boolean
    follow: boolean
    noarchive: boolean
    nosnippet: boolean
  }
  seoScore: SEOScore
  recommendations: SEORecommendation[]
  autoGenerated: {
    title: boolean
    description: boolean
    keywords: boolean
    lastGenerated: string
  }
}

const mockSEOData: SEOMetadata[] = [
  {
    id: '1',
    title: 'STM32H743VIT6 High Performance ARM Cortex-M7 Microcontroller',
    description: 'Discover the STM32H743VIT6 microcontroller with ARM Cortex-M7 core, 2MB Flash, and advanced peripherals for industrial IoT and automotive applications.',
    keywords: ['STM32H743', 'ARM Cortex-M7', 'microcontroller', 'industrial IoT', 'automotive'],
    focusKeyword: 'STM32H743 microcontroller',
    canonicalUrl: 'https://example.com/products/stm32h743vit6',
    contentReference: {
      contentId: 'stm32-h743',
      contentType: 'product'
    },
    structuredData: {
      productSchema: {
        name: 'STM32H743VIT6',
        brand: 'STMicroelectronics',
        category: 'Microcontroller',
        price: 14.50,
        currency: 'USD',
        availability: 'InStock'
      }
    },
    openGraph: {
      title: 'STM32H743VIT6 - High Performance Microcontroller',
      description: 'Advanced ARM Cortex-M7 microcontroller for demanding applications',
      image: 'https://example.com/images/stm32h743-og.jpg',
      type: 'product'
    },
    twitterCard: {
      card: 'summary_large_image',
      title: 'STM32H743VIT6 Microcontroller',
      description: 'High performance ARM Cortex-M7 MCU',
      image: 'https://example.com/images/stm32h743-twitter.jpg'
    },
    robots: {
      index: true,
      follow: true,
      noarchive: false,
      nosnippet: false
    },
    seoScore: {
      overall: 85,
      titleScore: 90,
      descriptionScore: 88,
      keywordScore: 82,
      contentScore: 80,
      lastCalculated: '2025-01-15T10:30:00Z'
    },
    recommendations: [
      {
        id: '1',
        type: 'suggestion',
        message: '考虑在标题中添加更多长尾关键词来提高搜索覆盖面',
        field: 'title',
        resolved: false
      },
      {
        id: '2',
        type: 'important',
        message: '添加更多相关关键词，特别是技术规格相关的词汇',
        field: 'keywords',
        resolved: false
      }
    ],
    autoGenerated: {
      title: false,
      description: true,
      keywords: true,
      lastGenerated: '2025-01-15T09:00:00Z'
    }
  }
];

const keywordSuggestions = [
  'STM32 microcontroller',
  'ARM Cortex-M7',
  'embedded systems',
  'industrial control',
  'IoT device',
  'automotive electronics',
  'real-time processing',
  'low power MCU',
  'high performance MCU',
  'STMicroelectronics'
];

export function SEOOptimizer() {
  const locale = useLocale();
  const [seoData, setSEOData] = useState<SEOMetadata[]>(mockSEOData);
  const [selectedItem, setSelectedItem] = useState<SEOMetadata | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [autoOptimizeEnabled, setAutoOptimizeEnabled] = useState(false);
  const [filterType, setFilterType] = useState<string>('all');
  const [searchQuery, setSearchQuery] = useState('');

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600 bg-green-100';
    if (score >= 60) return 'text-yellow-600 bg-yellow-100';
    if (score >= 40) return 'text-orange-600 bg-orange-100';
    return 'text-red-600 bg-red-100';
  };

  const getRecommendationIcon = (type: string) => {
    switch (type) {
      case 'critical': return <AlertCircle className="h-4 w-4 text-red-500" />;
      case 'important': return <Eye className="h-4 w-4 text-orange-500" />;
      case 'suggestion': return <Lightbulb className="h-4 w-4 text-blue-500" />;
      default: return <CheckCircle className="h-4 w-4 text-gray-500" />;
    }
  };

  const analyzeContent = async (itemId: string) => {
    setIsAnalyzing(true);

    // Simulate analysis
    await new Promise(resolve => setTimeout(resolve, 2000));

    setSEOData(data => data.map(item => {
      if (item.id === itemId) {
        return {
          ...item,
          seoScore: {
            ...item.seoScore,
            overall: Math.min(100, item.seoScore.overall + Math.random() * 10),
            lastCalculated: new Date().toISOString()
          },
          recommendations: [
            ...item.recommendations,
            {
              id: Date.now().toString(),
              type: 'suggestion',
              message: '分析完成：发现了新的优化机会',
              field: 'content',
              resolved: false
            }
          ]
        };
      }
      return item;
    }));

    setIsAnalyzing(false);
  };

  const generateMetadata = async (itemId: string, field: string) => {
    setIsAnalyzing(true);

    // Simulate generation
    await new Promise(resolve => setTimeout(resolve, 1500));

    setSEOData(data => data.map(item => {
      if (item.id === itemId) {
        const updates: any = {
          autoGenerated: {
            ...item.autoGenerated,
            [field]: true,
            lastGenerated: new Date().toISOString()
          }
        };

        if (field === 'title') {
          updates.title = `${item.title} - 优化版标题`;
        } else if (field === 'description') {
          updates.description = `${item.description} 自动生成的优化描述，包含更多相关关键词和吸引用户的内容。`;
        } else if (field === 'keywords') {
          updates.keywords = [...item.keywords, 'auto-generated', 'optimized'];
        }

        return { ...item, ...updates };
      }
      return item;
    }));

    setIsAnalyzing(false);
  };

  const filteredData = seoData.filter(item => {
    const matchesType = filterType === 'all' || item.contentReference.contentType === filterType;
    const matchesSearch = !searchQuery ||
      item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      item.keywords.some(k => k.toLowerCase().includes(searchQuery.toLowerCase()));

    return matchesType && matchesSearch;
  });

  return (
    <div className="container mx-auto p-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">SEO自动化工具</h1>
        <p className="text-gray-600">自动分析和优化内容的SEO表现</p>
      </div>

      <div className="mb-6 flex flex-wrap gap-4 items-center">
        <div className="flex-1 min-w-[200px]">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="搜索内容..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>

        <Select value={filterType} onValueChange={setFilterType}>
          <SelectTrigger className="w-[150px]">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">全部类型</SelectItem>
            <SelectItem value="product">产品</SelectItem>
            <SelectItem value="news">新闻</SelectItem>
            <SelectItem value="solution">解决方案</SelectItem>
            <SelectItem value="caseStudy">案例研究</SelectItem>
          </SelectContent>
        </Select>

        <div className="flex items-center gap-2">
          <Switch
            checked={autoOptimizeEnabled}
            onCheckedChange={setAutoOptimizeEnabled}
          />
          <Label>自动优化</Label>
        </div>

        <Dialog>
          <DialogTrigger asChild>
            <Button>
              <Plus className="h-4 w-4 mr-2" />
              添加SEO配置
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>添加新的SEO配置</DialogTitle>
            </DialogHeader>
            {/* New SEO config form would go here */}
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid gap-6">
        {filteredData.map((item) => (
          <Card key={item.id} className="hover:shadow-md transition-shadow">
            <CardHeader className="pb-4">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <CardTitle className="text-lg mb-1">{item.title}</CardTitle>
                  <CardDescription className="flex items-center gap-2">
                    <Badge variant="outline">{item.contentReference.contentType}</Badge>
                    <span>•</span>
                    <span>焦点关键词: {item.focusKeyword}</span>
                    {item.autoGenerated.title && (
                      <>
                        <span>•</span>
                        <Badge className="bg-blue-100 text-blue-800 text-xs">自动生成</Badge>
                      </>
                    )}
                  </CardDescription>
                </div>

                <div className="flex items-center gap-4">
                  <div className="text-center">
                    <div className={`text-2xl font-bold px-3 py-1 rounded-full ${getScoreColor(item.seoScore.overall)}`}>
                      {item.seoScore.overall}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">SEO评分</div>
                  </div>
                </div>
              </div>
            </CardHeader>

            <CardContent>
              <div className="space-y-4">
                <div className="grid md:grid-cols-4 gap-4">
                  <div className="text-center">
                    <div className="text-lg font-semibold">{item.seoScore.titleScore}</div>
                    <div className="text-sm text-gray-600">标题分数</div>
                  </div>
                  <div className="text-center">
                    <div className="text-lg font-semibold">{item.seoScore.descriptionScore}</div>
                    <div className="text-sm text-gray-600">描述分数</div>
                  </div>
                  <div className="text-center">
                    <div className="text-lg font-semibold">{item.seoScore.keywordScore}</div>
                    <div className="text-sm text-gray-600">关键词分数</div>
                  </div>
                  <div className="text-center">
                    <div className="text-lg font-semibold">{item.seoScore.contentScore}</div>
                    <div className="text-sm text-gray-600">内容分数</div>
                  </div>
                </div>

                <div className="border-t pt-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium">SEO进度</span>
                    <span className="text-sm text-gray-500">
                      {item.recommendations.filter(r => r.resolved).length}/{item.recommendations.length} 项已优化
                    </span>
                  </div>
                  <Progress
                    value={(item.recommendations.filter(r => r.resolved).length / item.recommendations.length) * 100}
                    className="h-2"
                  />
                </div>

                <div>
                  <div className="flex items-center gap-2 mb-2">
                    <Target className="h-4 w-4" />
                    <span className="text-sm font-medium">主要关键词</span>
                  </div>
                  <div className="flex flex-wrap gap-1">
                    {item.keywords.slice(0, 5).map((keyword, index) => (
                      <Badge key={index} variant="outline" className="text-xs">
                        {keyword}
                      </Badge>
                    ))}
                    {item.keywords.length > 5 && (
                      <Badge variant="outline" className="text-xs">
                        +{item.keywords.length - 5}
                      </Badge>
                    )}
                  </div>
                </div>

                <div>
                  <div className="flex items-center gap-2 mb-2">
                    <AlertCircle className="h-4 w-4" />
                    <span className="text-sm font-medium">优化建议</span>
                  </div>
                  <div className="space-y-2">
                    {item.recommendations.slice(0, 2).map((rec) => (
                      <div key={rec.id} className="flex items-center gap-2 text-sm">
                        {getRecommendationIcon(rec.type)}
                        <span className={rec.resolved ? 'line-through text-gray-500' : ''}>
                          {rec.message}
                        </span>
                      </div>
                    ))}
                    {item.recommendations.length > 2 && (
                      <div className="text-sm text-gray-500">
                        还有 {item.recommendations.length - 2} 条建议...
                      </div>
                    )}
                  </div>
                </div>

                <div className="flex items-center justify-between pt-4 border-t">
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setSelectedItem(item)}
                    >
                      <Eye className="h-4 w-4 mr-1" />
                      详细分析
                    </Button>

                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => analyzeContent(item.id)}
                      disabled={isAnalyzing}
                    >
                      <RefreshCw className={`h-4 w-4 mr-1 ${isAnalyzing ? 'animate-spin' : ''}`} />
                      重新分析
                    </Button>
                  </div>

                  <div className="text-xs text-gray-500">
                    最后更新: {new Date(item.seoScore.lastCalculated).toLocaleString()}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}

        {filteredData.length === 0 && (
          <div className="text-center py-12">
            <Search className="h-12 w-12 mx-auto text-gray-300 mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">暂无SEO数据</h3>
            <p className="text-gray-600">没有找到符合条件的SEO配置</p>
          </div>
        )}
      </div>

      {/* Detailed SEO Analysis Dialog */}
      {selectedItem && (
        <Dialog open={!!selectedItem} onOpenChange={() => setSelectedItem(null)}>
          <DialogContent className="max-w-6xl max-h-[80vh] overflow-auto">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-3">
                <TrendingUp className="h-5 w-5" />
                SEO详细分析 - {selectedItem.title}
                <div className={`px-2 py-1 rounded text-sm font-semibold ${getScoreColor(selectedItem.seoScore.overall)}`}>
                  {selectedItem.seoScore.overall}/100
                </div>
              </DialogTitle>
            </DialogHeader>

            <Tabs defaultValue="overview" className="mt-6">
              <TabsList className="grid w-full grid-cols-5">
                <TabsTrigger value="overview">概览</TabsTrigger>
                <TabsTrigger value="metadata">元数据</TabsTrigger>
                <TabsTrigger value="structured">结构化数据</TabsTrigger>
                <TabsTrigger value="social">社交媒体</TabsTrigger>
                <TabsTrigger value="recommendations">建议</TabsTrigger>
              </TabsList>

              <TabsContent value="overview" className="space-y-6">
                <div className="grid md:grid-cols-2 gap-6">
                  <Card>
                    <CardHeader>
                      <CardTitle>SEO评分详情</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="space-y-3">
                        <div className="flex justify-between items-center">
                          <span>标题优化</span>
                          <div className="flex items-center gap-2">
                            <Progress value={selectedItem.seoScore.titleScore} className="w-20 h-2" />
                            <span className="text-sm font-medium">{selectedItem.seoScore.titleScore}%</span>
                          </div>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>描述优化</span>
                          <div className="flex items-center gap-2">
                            <Progress value={selectedItem.seoScore.descriptionScore} className="w-20 h-2" />
                            <span className="text-sm font-medium">{selectedItem.seoScore.descriptionScore}%</span>
                          </div>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>关键词密度</span>
                          <div className="flex items-center gap-2">
                            <Progress value={selectedItem.seoScore.keywordScore} className="w-20 h-2" />
                            <span className="text-sm font-medium">{selectedItem.seoScore.keywordScore}%</span>
                          </div>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>内容质量</span>
                          <div className="flex items-center gap-2">
                            <Progress value={selectedItem.seoScore.contentScore} className="w-20 h-2" />
                            <span className="text-sm font-medium">{selectedItem.seoScore.contentScore}%</span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle>快速操作</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <Button
                        className="w-full justify-start"
                        variant="outline"
                        onClick={() => generateMetadata(selectedItem.id, 'title')}
                        disabled={isAnalyzing}
                      >
                        <RefreshCw className={`h-4 w-4 mr-2 ${isAnalyzing ? 'animate-spin' : ''}`} />
                        自动优化标题
                        {selectedItem.autoGenerated.title && (
                          <Badge className="ml-auto bg-blue-100 text-blue-800 text-xs">已生成</Badge>
                        )}
                      </Button>

                      <Button
                        className="w-full justify-start"
                        variant="outline"
                        onClick={() => generateMetadata(selectedItem.id, 'description')}
                        disabled={isAnalyzing}
                      >
                        <FileText className="h-4 w-4 mr-2" />
                        自动优化描述
                        {selectedItem.autoGenerated.description && (
                          <Badge className="ml-auto bg-blue-100 text-blue-800 text-xs">已生成</Badge>
                        )}
                      </Button>

                      <Button
                        className="w-full justify-start"
                        variant="outline"
                        onClick={() => generateMetadata(selectedItem.id, 'keywords')}
                        disabled={isAnalyzing}
                      >
                        <Tag className="h-4 w-4 mr-2" />
                        自动提取关键词
                        {selectedItem.autoGenerated.keywords && (
                          <Badge className="ml-auto bg-blue-100 text-blue-800 text-xs">已生成</Badge>
                        )}
                      </Button>

                      <Button className="w-full justify-start" variant="outline">
                        <BarChart3 className="h-4 w-4 mr-2" />
                        查看排名跟踪
                      </Button>

                      <Button className="w-full justify-start" variant="outline">
                        <Download className="h-4 w-4 mr-2" />
                        导出SEO报告
                      </Button>
                    </CardContent>
                  </Card>
                </div>

                <Card>
                  <CardHeader>
                    <CardTitle>关键词分析</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <Label>焦点关键词</Label>
                        <div className="mt-1 p-2 bg-blue-50 rounded">
                          <span className="font-medium text-blue-800">{selectedItem.focusKeyword}</span>
                        </div>
                      </div>

                      <div>
                        <Label>相关关键词</Label>
                        <div className="flex flex-wrap gap-2 mt-2">
                          {selectedItem.keywords.map((keyword, index) => (
                            <Badge key={index} variant="outline">
                              {keyword}
                            </Badge>
                          ))}
                        </div>
                      </div>

                      <div>
                        <Label>推荐关键词</Label>
                        <div className="flex flex-wrap gap-2 mt-2">
                          {keywordSuggestions.slice(0, 8).map((keyword, index) => (
                            <Badge key={index} variant="secondary" className="cursor-pointer hover:bg-blue-100">
                              {keyword} <Plus className="h-3 w-3 ml-1" />
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="metadata" className="space-y-6">
                <div className="grid gap-6">
                  <Card>
                    <CardHeader>
                      <CardTitle>基础元数据</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <Label>页面标题 ({selectedItem.title.length}/60)</Label>
                        <Input
                          value={selectedItem.title}
                          className={selectedItem.title.length > 60 ? 'border-orange-300' : ''}
                        />
                        {selectedItem.title.length > 60 && (
                          <p className="text-sm text-orange-600 mt-1">标题可能在搜索结果中被截断</p>
                        )}
                      </div>

                      <div>
                        <Label>元描述 ({selectedItem.description.length}/160)</Label>
                        <Textarea
                          value={selectedItem.description}
                          rows={3}
                          className={selectedItem.description.length > 160 ? 'border-orange-300' : ''}
                        />
                        {selectedItem.description.length > 160 && (
                          <p className="text-sm text-orange-600 mt-1">描述可能在搜索结果中被截断</p>
                        )}
                      </div>

                      <div>
                        <Label>规范URL</Label>
                        <Input value={selectedItem.canonicalUrl} />
                      </div>

                      <div>
                        <Label>Robots设置</Label>
                        <div className="flex gap-4 mt-2">
                          <div className="flex items-center gap-2">
                            <Switch checked={selectedItem.robots.index} />
                            <Label>允许索引</Label>
                          </div>
                          <div className="flex items-center gap-2">
                            <Switch checked={selectedItem.robots.follow} />
                            <Label>允许跟随链接</Label>
                          </div>
                          <div className="flex items-center gap-2">
                            <Switch checked={selectedItem.robots.noarchive} />
                            <Label>禁止缓存</Label>
                          </div>
                          <div className="flex items-center gap-2">
                            <Switch checked={selectedItem.robots.nosnippet} />
                            <Label>禁止摘要</Label>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>

              <TabsContent value="structured" className="space-y-6">
                <div className="grid gap-6">
                  <Card>
                    <CardHeader>
                      <CardTitle>产品结构化数据</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <pre className="text-sm">
{JSON.stringify(selectedItem.structuredData.productSchema, null, 2)}
                        </pre>
                      </div>
                      <div className="flex gap-2 mt-4">
                        <Button variant="outline" size="sm">
                          <Code className="h-4 w-4 mr-1" />
                          验证结构化数据
                        </Button>
                        <Button variant="outline" size="sm">
                          <Eye className="h-4 w-4 mr-1" />
                          预览搜索结果
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>

              <TabsContent value="social" className="space-y-6">
                <div className="grid md:grid-cols-2 gap-6">
                  <Card>
                    <CardHeader>
                      <CardTitle>Open Graph</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <Label>OG标题</Label>
                        <Input value={selectedItem.openGraph.title} />
                      </div>
                      <div>
                        <Label>OG描述</Label>
                        <Textarea value={selectedItem.openGraph.description} rows={2} />
                      </div>
                      <div>
                        <Label>OG图片</Label>
                        <Input value={selectedItem.openGraph.image} />
                      </div>
                      <div>
                        <Label>内容类型</Label>
                        <Select value={selectedItem.openGraph.type}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="website">网站</SelectItem>
                            <SelectItem value="article">文章</SelectItem>
                            <SelectItem value="product">产品</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle>Twitter Card</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <Label>卡片类型</Label>
                        <Select value={selectedItem.twitterCard.card}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="summary">摘要</SelectItem>
                            <SelectItem value="summary_large_image">大图摘要</SelectItem>
                            <SelectItem value="product">产品</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label>Twitter标题</Label>
                        <Input value={selectedItem.twitterCard.title} />
                      </div>
                      <div>
                        <Label>Twitter描述</Label>
                        <Textarea value={selectedItem.twitterCard.description} rows={2} />
                      </div>
                      <div>
                        <Label>Twitter图片</Label>
                        <Input value={selectedItem.twitterCard.image} />
                      </div>
                    </CardContent>
                  </Card>
                </div>

                <Card>
                  <CardHeader>
                    <CardTitle>社交媒体预览</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="border rounded-lg p-4 bg-gray-50">
                      <div className="flex items-center gap-3">
                        <div className="w-16 h-16 bg-gray-300 rounded flex items-center justify-center">
                          <Image className="h-8 w-8 text-gray-500" />
                        </div>
                        <div className="flex-1">
                          <h3 className="font-semibold text-blue-600">{selectedItem.openGraph.title}</h3>
                          <p className="text-sm text-gray-600 mt-1">{selectedItem.openGraph.description}</p>
                          <p className="text-xs text-gray-400 mt-1">example.com</p>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="recommendations" className="space-y-6">
                <div className="space-y-4">
                  {selectedItem.recommendations.map((rec) => (
                    <Card key={rec.id}>
                      <CardContent className="pt-4">
                        <div className="flex items-start gap-3">
                          {getRecommendationIcon(rec.type)}
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                              <Badge
                                className={
                                  rec.type === 'critical' ? 'bg-red-100 text-red-800' :
                                  rec.type === 'important' ? 'bg-orange-100 text-orange-800' :
                                  'bg-blue-100 text-blue-800'
                                }
                              >
                                {rec.type === 'critical' ? '严重' : rec.type === 'important' ? '重要' : '建议'}
                              </Badge>
                              <Badge variant="outline">{rec.field}</Badge>
                              {rec.resolved && (
                                <Badge className="bg-green-100 text-green-800">已解决</Badge>
                              )}
                            </div>
                            <p className={`text-sm ${rec.resolved ? 'line-through text-gray-500' : ''}`}>
                              {rec.message}
                            </p>
                          </div>
                          <div className="flex gap-1">
                            <Button variant="ghost" size="sm">
                              <CheckCircle className="h-4 w-4" />
                            </Button>
                            <Button variant="ghost" size="sm">
                              <Settings className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </TabsContent>
            </Tabs>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}
